### 컨테이너 인프라 환경

리눅스 운영체제의 **커널 하나에 여러 개의 컨테이너(프로세스)**가 격리된 상태로 실행

쿠버네티스의 등장으로 효율적으로 컨테이너 인프라 환경 관리가 가능해지면서 생태계가 확장됨

### 쿠버네티스를 왜 사용할까

정확하게 얘기하면 쿠버네티스는 컨테이너 Orchestration을 위한 솔루션으로 다수의 컨테이너를 유기적으로 연결, 실행, 종료, 상태 추적 등을 도와준다. 

다른 솔루션을 제치고 쿠버네티스가 시장을 선점한 이유는 다양한 형태로 활용이 가능하기 때문이다. IT 인프라 자체를 컨테이너화할 수 있다. 

학습 곡선 자체는 어려우나

1. 매우 안정적이고
2. 확장성이 좋으며
3. 세부 설정 지원이 다양하게 있고
4. 정보량도 많고
5. 에코 파트너도 많다.



### pod 생성 방법

1. kubectl create
2. kubectl run (pod 이름) (생성할 이미지 이름)
    
    ```bash
    kubectl run nginx-pod --image=nginx
    pod/nginx-pod created
    ```
    
    이렇게 생성한 pod은 확인하면 이름이 nginx-pod으로 출력
    
    ```bash
    kubectl get pod
    NAME        READY       STATUS     RESTARTS       AGE
    nginx-pod   1/1         RUNNING    0              35s 
    ```
    
    create로 pod을 생성하려면 kubectl create에 deployment를 추가해서 실행해야함
    
    (dpy-nginx는 위의 기존 pod 이름인 nginx와의 중복을 피하기 위해서 씀)
    
    ```bash
    kubectl create deployment dpy-nginx --image=nginx
    ```
    
    dpy-nginx를 제외한 뒷부분은 무작위로 생성됨
    
    ```bash
    kubectl get pod
    NAME                      READY       STATUS     RESTARTS       AGE
    dpy-nginx-7adsf812-xmm3   1/1         RUNNING    0              50s
    nginx-pod                 1/1         RUNNING    0              87s 
    ```
    
    두 pod 생성 방식의 차이는
    
    1. run으로 pod 생성하면 1개만 생성되고 관리됨
    2. create로 생성하면 Deployment라는 관리 그룹 내에 pod이 생성됨
    

### Object : pod, deployment를 부르는 단위

쿠버네티스에선 여러 유형의 오브젝트를 제공한다.

1. 기본 오브젝트
    1. pod
        
        실행 최소 단위. 독립적인 공간과 IP를 가짐. 1개의 pod은 1개 이상의 컨테이너를 가짐
        
    2. namespace
        
        클러스터에서 사용되는 리소스를 구분해 관리하는 그룹
        
        예를 들어, default, kube-system, metallb-system
        
        - metallb-system(온프레미서에서 쿠버네티스 사용 시 외부에서 쿠버네티스 클러스터 내부로 접속하게 도와주는 컨테이너들이 속함)
        
    3. volume
        
        pod이 생성될 때 pod에서 사용할 수 있는 디렉터리 제공
        
        pod이 사라져도 저장, 보존이 가능한 디렉터리를 만들 수도 있음
        
    4. service
        
        pod 접속을 위해 서비스를 통해 내/외부로 연결
        
        → 새로 pod이 생성되면 부여되는 IP를 기존에 제공하던 기능과 연결해줌
        
        → 서비스를 통하는 이유는, pod의 접속 정보가 계속 바뀌기 때문(일종의 게이트웨이)